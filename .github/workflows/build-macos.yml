name: Build macOS Executable

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka==1.8.6 pillow requests Py3AMF==0.8.10 curl_cffi==0.10.0

      # 4. Build executable with Nuitka
      - name: Build with Nuitka
        run: |
          set -e
          cd .github/workflows
          mkdir -p dist
          python -m nuitka --onefile --standalone \
            --include-module=verification \
            --include-module=scfarm \
            --include-module=room \
            --include-module=profile_picture \
            --include-module=msp \
            --include-module=login_helper \
            --include-module=idretriever \
            --include-module=draftdesign \
            --include-module=autograph \
            --include-module=ascii \
            --include-module=animation \
            --include-module=curl_cffi.requests \
            --include-module=PyAMF \
            --include-module=PyAMF.amf0 \
            --include-module=PyAMF.amf3 \
            --include-package=PIL \
            --include-module=tkinter \
            --include-module=tkinter.scrolledtext \
            --include-module=tkinter.messagebox \
            --enable-plugin=tk-inter \
            --output-dir=dist \
            main-gui.py

      # 5. Wrap binary into .app bundle
      - name: Wrap in .app bundle
        run: |
          cd .github/workflows
          APP_NAME="StarKey"
          mkdir -p $APP_NAME.app/Contents/{MacOS,Resources}
          mv dist/main-gui.bin $APP_NAME.app/Contents/MacOS/main-gui
          chmod +x $APP_NAME.app/Contents/MacOS/main-gui
          cp assets/icon.icns $APP_NAME.app/Contents/Resources/icon.icns
          cat <<EOF > $APP_NAME.app/Contents/Info.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleName</key>
    <string>$APP_NAME</string>
    <key>CFBundleDisplayName</key>
    <string>$APP_NAME</string>
    <key>CFBundleIdentifier</key>
    <string>com.yourname.$APP_NAME</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>CFBundleExecutable</key>
    <string>main-gui</string>
    <key>CFBundleIconFile</key>
    <string>icon.icns</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.12</string>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.utilities</string>
</dict>
</plist>
EOF

      # 6. Upload .app bundle as artifact
      - name: Upload .app artifact
        uses: actions/upload-artifact@v4
        with:
          name: StarKey-macos
          path: .github/workflows/StarKey.app
